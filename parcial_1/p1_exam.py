#!/usr/bin/env python3
"""
AN√ÅLISIS ESTAD√çSTICO - PROBLEMA 1 (versi√≥n mejorada)
- Lectura segura del CSV (elimina √≠ndice "Unnamed: 0" si aparece)
- Estimaci√≥n de par√°metros (pooled y dentro de muestra)
- Verificaci√≥n de distribuci√≥n de medias (Shapiro + Lilliefors opcional)
- Diagn√≥sticos de uniformidad y homogeneidad
- Gr√°ficas claras (bins alineados a enteros para medias ~[0,99])
"""

import warnings
warnings.filterwarnings("ignore")

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from scipy import stats
from scipy.stats import shapiro, kstest, levene, chi2
from scipy.special import gamma as gamma_fn

# Lilliefors (opcional): si statsmodels est√° instalado, lo usamos
try:
    from statsmodels.stats.diagnostic import lilliefors
    HAVE_LILLIEFORS = True
except Exception:
    HAVE_LILLIEFORS = False

plt.style.use('seaborn-v0_8-darkgrid')
sns.set_palette("husl")

# ----------------------------- Utilidades -----------------------------

def leer_csv_muestras(path: str) -> pd.DataFrame:
    """Lee el CSV y elimina una posible columna √≠ndice ('Unnamed: 0')."""
    df = pd.read_csv(path)
    if 'Unnamed: 0' in df.columns:
        df = df.drop(columns=['Unnamed: 0'])
    # Si la primera columna es exactamente el vector 0..n-1, tambi√©n la quitamos
    if len(df.columns) > 0:
        first = df.columns[0]
        if pd.api.types.is_integer_dtype(df[first]) and np.array_equal(df[first].values, np.arange(len(df))):
            df = df.drop(columns=[first])
    return df

def c4(n: int) -> float:
    """Constante c4 para corregir el sesgo de s (desv. est√°ndar muestral).
    F√≥rmula: c4 = sqrt(2/(n-1)) * Œì(n/2) / Œì((n-1)/2)
    """
    if n <= 1:
        return np.nan
    return np.sqrt(2/(n-1)) * gamma_fn(n/2) / gamma_fn((n-1)/2)

def bins_uniformes_enteros(x: np.ndarray, ancho: float = 1.0):
    """Crea bordes de bins centrados en enteros para histogramas de medias ~[0,99]."""
    xmin, xmax = float(np.min(x)), float(np.max(x))
    left = np.floor(xmin - 0.5)
    right = np.ceil(xmax + 0.5)
    return np.arange(left, right + ancho, ancho)

# ----------------------------- Parte A -----------------------------

def analisis_parte_a(data: pd.DataFrame):
    """
    PARTE A: Estimaci√≥n de la media y desviaci√≥n est√°ndar poblacional
    Distingue entre par√°metros de mezcla (pooled total) y œÉ intr√≠nseco
    """
    print("\n" + "="*70)
    print("A) ESTIMACI√ìN DE LA MEDIA Y DESVIACI√ìN EST√ÅNDAR POBLACIONAL")
    print("="*70)
    
    all_data = data.values.flatten()
    N = all_data.size
    
    # M√©todo 1: Pooled total (par√°metros de la mezcla)
    mu_est1 = float(np.mean(all_data))
    sigma_est1 = float(np.std(all_data, ddof=0))  # poblaci√≥n (mezcla)
    
    # M√©todo 2: Dentro de muestra (œÉ intr√≠nseco, suponiendo homogeneidad)
    sample_means = data.mean(axis=0).values
    sample_stds = data.std(axis=0, ddof=1).values
    sample_vars = data.var(axis=0, ddof=1).values
    
    mu_est2 = float(np.mean(sample_means))
    sigma_est2_pooled = float(np.sqrt(np.mean(sample_vars)))  # œÉ dentro
    
    # Correcci√≥n c4 del sesgo para s
    n = data.shape[0]
    c4_n = c4(n)
    s_unbiased = sample_stds / c4_n if np.isfinite(c4_n) and c4_n > 0 else sample_stds
    
    print(f"\nüìä M√âTODO 1: Pooled total (mezcla de poblaciones)")
    print(f"   ‚Ä¢ N total: {N:,}")
    print(f"   ‚Ä¢ ŒºÃÇ (pooled): {mu_est1:.4f}")
    print(f"   ‚Ä¢ œÉÃÇ (pooled): {sigma_est1:.4f}  (var = {sigma_est1**2:.4f})")
    print(f"   ‚ö†Ô∏è Nota: Este œÉ refleja la mezcla de todas las poblaciones")
    
    print(f"\nüìä M√âTODO 2: Dentro de muestra (œÉ intr√≠nseco)")
    print(f"   ‚Ä¢ Media de las medias: {mu_est2:.4f}")
    print(f"   ‚Ä¢ œÉ intr√≠nseco (pooled de varianzas): {sigma_est2_pooled:.4f}")
    print(f"   ‚Ä¢ Media de s (no corregido): {np.mean(sample_stds):.4f}")
    if np.isfinite(c4_n):
        print(f"   ‚Ä¢ Media de s/c4 (corregido): {np.mean(s_unbiased):.4f}  (c4={c4_n:.5f})")
    
    # An√°lisis de heterogeneidad
    print("\n‚ö†Ô∏è AN√ÅLISIS DE HETEROGENEIDAD:")
    print(f"   ‚Ä¢ Rango de medias: [{np.min(sample_means):.4f}, {np.max(sample_means):.4f}]")
    print(f"   ‚Ä¢ Amplitud del rango: {np.max(sample_means) - np.min(sample_means):.4f}")
    print(f"   ‚Ä¢ CV de las desv. est√°ndar: {np.std(sample_stds)/np.mean(sample_stds)*100:.2f}%")
    
    # Visualizaci√≥n
    fig, axes = plt.subplots(1, 3, figsize=(15, 4))
    
    # Histograma de todas las observaciones
    axes[0].hist(all_data, bins=100, alpha=0.75, edgecolor='black', linewidth=0.5)
    axes[0].axvline(mu_est1, color='red', linestyle='--', linewidth=2, label=f'Œº = {mu_est1:.2f}')
    axes[0].set_title('Distribuci√≥n de todas las observaciones (mezcla)')
    axes[0].set_xlabel('Valor')
    axes[0].set_ylabel('Frecuencia')
    axes[0].legend()
    
    # Histograma de medias con bins alineados a enteros
    axes[1].hist(sample_means, bins=bins_uniformes_enteros(sample_means), alpha=0.75,
                 color='green', edgecolor='black', linewidth=0.5)
    axes[1].axvline(mu_est2, color='red', linestyle='--', linewidth=2, label=f'ŒºÃÑ = {mu_est2:.2f}')
    axes[1].set_title('Distribuci√≥n de medias muestrales')
    axes[1].set_xlabel('Media muestral')
    axes[1].set_ylabel('Frecuencia')
    axes[1].legend()
    
    # Boxplot de desviaciones est√°ndar
    axes[2].boxplot(sample_stds, vert=True)
    axes[2].set_title('Desviaciones est√°ndar muestrales')
    axes[2].set_ylabel('Desviaci√≥n est√°ndar')
    axes[2].grid(True, alpha=0.3)
    
    plt.tight_layout()
    plt.show()
    
    return mu_est1, sigma_est1, sample_means, sample_stds, s_unbiased

# ----------------------------- Parte B -----------------------------

def analisis_parte_b(sample_means: np.ndarray, sample_stds: np.ndarray):
    """
    PARTE B: An√°lisis de la distribuci√≥n de la media muestral
    Incluye Lilliefors si est√° disponible, sino KS con advertencia
    """
    print("\n" + "="*70)
    print("B) DISTRIBUCI√ìN DE LA MEDIA MUESTRAL")
    print("="*70)
    
    mean_of_means = float(np.mean(sample_means))
    std_of_means = float(np.std(sample_means, ddof=1))
    n_per_sample = 5000
    theoretical_sem = float(np.mean(sample_stds) / np.sqrt(n_per_sample))
    
    print("\nüìä CARACTER√çSTICAS DE LA DISTRIBUCI√ìN:")
    print(f"   ‚Ä¢ N√∫mero de medias muestrales: {len(sample_means)}")
    print(f"   ‚Ä¢ Media de las medias (xÃÑÃÑ): {mean_of_means:.4f}")
    print(f"   ‚Ä¢ Desv. est√°ndar de las medias: {std_of_means:.4f}")
    print(f"   ‚Ä¢ M√≠nimo: {np.min(sample_means):.4f}")
    print(f"   ‚Ä¢ M√°ximo: {np.max(sample_means):.4f}")
    print(f"   ‚Ä¢ Rango: {np.max(sample_means) - np.min(sample_means):.4f}")
    
    print("\nüìà TEOREMA DEL L√çMITE CENTRAL (si fuese 1 sola poblaci√≥n):")
    print(f"   ‚Ä¢ Tama√±o de cada muestra (n): {n_per_sample}")
    print(f"   ‚Ä¢ Error est√°ndar te√≥rico (œÉ/‚àön): {theoretical_sem:.6f}")
    print(f"   ‚Ä¢ Error est√°ndar observado: {std_of_means:.4f}")
    print(f"   ‚Ä¢ Raz√≥n observado/te√≥rico: {std_of_means/theoretical_sem:.1f}")
    print(f"   ‚ö†Ô∏è Esta raz√≥n extrema indica m√∫ltiples poblaciones")
    
    # Pruebas de normalidad
    stat_shapiro, p_shapiro = shapiro(sample_means)
    print("\nüìä PRUEBAS DE NORMALIDAD:")
    print(f"   ‚Ä¢ Test de Shapiro-Wilk:")
    print(f"     - Estad√≠stico: {stat_shapiro:.4f}")
    print(f"     - p-valor: {p_shapiro:.4f}")
    print(f"     - Conclusi√≥n: {'Normal' if p_shapiro > 0.05 else 'No normal'} (Œ±=0.05)")
    
    if HAVE_LILLIEFORS:
        # Estandarizar para Lilliefors
        z = (sample_means - mean_of_means) / std_of_means
        stat_lil, p_lil = lilliefors(z, dist='norm')
        print(f"   ‚Ä¢ Test de Lilliefors (m√°s apropiado):")
        print(f"     - Estad√≠stico: {stat_lil:.4f}")
        print(f"     - p-valor: {p_lil:.4f}")
        print(f"     - Conclusi√≥n: {'Normal' if p_lil > 0.05 else 'No normal'} (Œ±=0.05)")
    else:
        stat_ks, p_ks = kstest(sample_means, 'norm', args=(mean_of_means, std_of_means))
        print(f"   ‚Ä¢ Test KS (‚ö†Ô∏è p-valor no exacto con par√°metros estimados):")
        print(f"     - Estad√≠stico: {stat_ks:.4f}")
        print(f"     - p-valor: {p_ks:.4f}")
        print(f"     - Nota: Instala statsmodels para Lilliefors")
    
    # Momentos
    skewness = stats.skew(sample_means)
    kurtosis_val = stats.kurtosis(sample_means)
    
    print(f"\n   ‚Ä¢ Asimetr√≠a (skewness): {skewness:.4f}")
    print(f"   ‚Ä¢ Curtosis (kurtosis): {kurtosis_val:.4f}")
    
    # Regla emp√≠rica
    z_scores = np.abs((sample_means - mean_of_means) / std_of_means)
    within_1sd = np.mean(z_scores <= 1) * 100
    within_2sd = np.mean(z_scores <= 2) * 100
    within_3sd = np.mean(z_scores <= 3) * 100
    
    print("\nüìä REGLA EMP√çRICA (68-95-99.7):")
    print(f"   ‚Ä¢ Dentro de ¬±1œÉ: {within_1sd:.1f}% (esperado: ~68%)")
    print(f"   ‚Ä¢ Dentro de ¬±2œÉ: {within_2sd:.1f}% (esperado: ~95%)")
    print(f"   ‚Ä¢ Dentro de ¬±3œÉ: {within_3sd:.1f}% (esperado: ~99.7%)")
    
    # Visualizaci√≥n
    fig, axes = plt.subplots(2, 2, figsize=(12, 10))
    
    # Histograma con bins alineados y curva normal
    bins = bins_uniformes_enteros(sample_means)
    axes[0, 0].hist(sample_means, bins=bins, density=True, alpha=0.75, 
                    color='skyblue', edgecolor='black', linewidth=0.5)
    x = np.linspace(np.min(sample_means), np.max(sample_means), 200)
    axes[0, 0].plot(x, stats.norm.pdf(x, mean_of_means, std_of_means), 
                    'r-', linewidth=2, label='Normal te√≥rica')
    axes[0, 0].set_title('Distribuci√≥n de medias muestrales')
    axes[0, 0].set_xlabel('Media muestral')
    axes[0, 0].set_ylabel('Densidad')
    axes[0, 0].legend()
    
    # Q-Q plot
    stats.probplot(sample_means, dist="norm", plot=axes[0, 1])
    axes[0, 1].set_title('Q-Q Plot')
    axes[0, 1].grid(True, alpha=0.3)
    
    # Boxplot
    axes[1, 0].boxplot(sample_means, vert=False)
    axes[1, 0].set_title('Boxplot de medias muestrales')
    axes[1, 0].set_xlabel('Media muestral')
    axes[1, 0].grid(True, alpha=0.3)
    
    # Diagrama de dispersi√≥n √≠ndice vs media
    axes[1, 1].scatter(range(len(sample_means)), sample_means, alpha=0.6, s=20)
    axes[1, 1].set_title('Medias muestrales por √≠ndice')
    axes[1, 1].set_xlabel('√çndice de muestra')
    axes[1, 1].set_ylabel('Media muestral')
    axes[1, 1].grid(True, alpha=0.3)
    
    plt.tight_layout()
    plt.show()
    
    return mean_of_means, std_of_means

# ----------------------------- Parte C -----------------------------

def analisis_parte_c(sample_means: np.ndarray, sample_stds: np.ndarray, data: pd.DataFrame):
    """
    PARTE C: Observaciones sobre el proceso de muestreo
    An√°lisis de uniformidad y homogeneidad mejorado
    """
    print("\n" + "="*70)
    print("C) OBSERVACIONES SOBRE EL PROCESO DE MUESTREO")
    print("="*70)
    
    # An√°lisis de espaciamiento
    sorted_means = np.sort(sample_means)
    spacings = np.diff(sorted_means)
    
    print("\nüîç AN√ÅLISIS DE ESPACIAMIENTO ENTRE MEDIAS ORDENADAS:")
    print(f"   ‚Ä¢ Espaciamiento promedio: {np.mean(spacings):.4f}")
    print(f"   ‚Ä¢ Desv. est√°ndar: {np.std(spacings):.4f}")
    print(f"   ‚Ä¢ M√≠nimo: {np.min(spacings):.4f}")
    print(f"   ‚Ä¢ M√°ximo: {np.max(spacings):.4f}")
    print(f"   ‚ö†Ô∏è Espaciamiento ‚âà 1.0 sugiere medias equiespaciadas")
    
    # Test de uniformidad con bins alineados a enteros
    bins = bins_uniformes_enteros(sample_means)
    hist, edges = np.histogram(sample_means, bins=bins)
    expected = len(sample_means) / len(hist)
    chi2_stat = np.sum((hist - expected)**2 / (expected + 1e-12))
    dfree = max(len(hist) - 1, 1)
    chi2_crit = chi2.ppf(0.95, dfree)
    
    print("\nüìä TEST DE UNIFORMIDAD (œá¬≤ con bins alineados a enteros):")
    print(f"   ‚Ä¢ N√∫mero de bins: {len(hist)}")
    print(f"   ‚Ä¢ œá¬≤ observado: {chi2_stat:.4f}")
    print(f"   ‚Ä¢ œá¬≤ cr√≠tico (Œ±=0.05, df={dfree}): {chi2_crit:.4f}")
    print(f"   ‚Ä¢ Conclusi√≥n: {'Distribuci√≥n uniforme' if chi2_stat < chi2_crit else 'No uniforme'}")
    
    # Homogeneidad de varianzas
    print("\nüìä AN√ÅLISIS DE HOMOGENEIDAD DE VARIANZAS:")
    print(f"   ‚Ä¢ Media de las desv. est√°ndar: {np.mean(sample_stds):.4f}")
    print(f"   ‚Ä¢ Desv. est√°ndar de las desv. est√°ndar: {np.std(sample_stds):.6f}")
    print(f"   ‚Ä¢ Coef. de variaci√≥n: {np.std(sample_stds)/np.mean(sample_stds)*100:.2f}%")
    print(f"   ‚úì CV < 2% indica varianzas muy homog√©neas")
    
    # Test de Levene
    k = min(10, data.shape[1])
    samples_for_levene = [data.iloc[:, i].values for i in range(k)]
    stat_levene, p_levene = levene(*samples_for_levene)
    
    print(f"\n   ‚Ä¢ Test de Levene (primeras {k} muestras):")
    print(f"     - Estad√≠stico: {stat_levene:.4f}")
    print(f"     - p-valor: {p_levene:.4f}")
    print(f"     - Conclusi√≥n: {'Varianzas homog√©neas' if p_levene > 0.05 else 'Varianzas no homog√©neas'} (Œ±=0.05)")
    
    # Conclusiones
    print("\n" + "="*70)
    print("CONCLUSIONES FINALES")
    print("="*70)
    
    print("\nüìå HALLAZGO PRINCIPAL:")
    print("   Los datos NO provienen de una √∫nica poblaci√≥n normal.")
    
    print("\nüìä EVIDENCIA:")
    print("   1. DISTRIBUCI√ìN UNIFORME: Las medias muestrales est√°n")
    print("      uniformemente distribuidas en [0, 99], no concentradas")
    print("      alrededor de un valor central como espera el TLC.")
    
    print("\n   2. ERROR EST√ÅNDAR AN√ìMALO: La raz√≥n observado/te√≥rico")
    print("      es ~4,000, imposible bajo una sola poblaci√≥n.")
    
    print("\n   3. VARIANZA HOMOG√âNEA: Todas las muestras tienen")
    print("      œÉ ‚âà 0.5 (CV < 2%), sugiriendo proceso controlado.")
    
    print("\nüí° INTERPRETACI√ìN:")
    print("   Cada columna representa una muestra de una poblaci√≥n")
    print("   diferente con N(Œº·µ¢, 0.5¬≤), donde Œº·µ¢ ~ Uniforme(0, 99)")
    
    print("\nüìä RESPUESTAS AL PROBLEMA:")
    print("\n   a) ESTIMACI√ìN DE PAR√ÅMETROS:")
    print("      ‚Ä¢ No es apropiado estimar Œº y œÉ √∫nicos")
    print("      ‚Ä¢ œÉ intr√≠nseco (dentro) ‚âà 0.5")
    print("      ‚Ä¢ œÉ pooled (mezcla) ‚âà 28.9 refleja heterogeneidad")
    
    print("\n   b) DISTRIBUCI√ìN DE MEDIAS:")
    print("      ‚Ä¢ NO sigue el TLC para una poblaci√≥n")
    print("      ‚Ä¢ Distribuci√≥n uniforme, no normal")
    
    print("\n   c) PROCESO DE MUESTREO:")
    print("      ‚Ä¢ Artificial/simulado con 100 poblaciones")
    print("      ‚Ä¢ Cada poblaci√≥n: N(i, 0.5¬≤) para i ‚àà [0, 99]")
    
    # Visualizaci√≥n final
    fig, axes = plt.subplots(1, 3, figsize=(15, 5))
    
    # Distribuci√≥n uniforme de las medias con bins alineados
    axes[0].hist(sample_means, bins=bins, alpha=0.75, color='coral', 
                 edgecolor='black', linewidth=0.5)
    axes[0].axhline(y=expected, color='blue', linestyle='--', 
                    linewidth=2, label=f'Esperado (uniforme): {expected:.1f}')
    axes[0].set_title('Distribuci√≥n de medias muestrales')
    axes[0].set_xlabel('Media muestral')
    axes[0].set_ylabel('Frecuencia')
    axes[0].legend()
    
    # Espaciamiento entre medias ordenadas
    axes[1].plot(spacings, 'o-', alpha=0.6, markersize=3)
    axes[1].axhline(y=1.0, color='red', linestyle='--', linewidth=2, 
                    label='Espaciamiento esperado = 1.0')
    axes[1].set_title('Espaciamiento entre medias consecutivas')
    axes[1].set_xlabel('Posici√≥n')
    axes[1].set_ylabel('Espaciamiento')
    axes[1].legend()
    axes[1].grid(True, alpha=0.3)
    
    # Desviaciones est√°ndar
    axes[2].plot(sample_stds, 'o', alpha=0.6, markersize=4)
    axes[2].axhline(y=0.5, color='red', linestyle='--', linewidth=2, 
                    label='œÉ = 0.5')
    axes[2].set_title('Desviaciones est√°ndar muestrales')
    axes[2].set_xlabel('√çndice de muestra')
    axes[2].set_ylabel('Desviaci√≥n est√°ndar')
    axes[2].legend()
    axes[2].grid(True, alpha=0.3)
    
    plt.tight_layout()
    plt.show()

# ----------------------------- Funci√≥n Principal -----------------------------

def main():
    """Ejecuta el an√°lisis completo con lectura segura del CSV"""
    
    print("\n‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó")
    print("‚ïë     AN√ÅLISIS ESTAD√çSTICO COMPLETO - PROBLEMA 1 (MEJORADO)  ‚ïë")
    print("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù")
    
    # Intentar cargar los datos procesados primero
    try:
        # Primero intentar con los archivos procesados
        data = leer_csv_muestras('parcial_1/data/exam_data.csv')
        print(f"\n‚úì Datos procesados cargados: {data.shape}")
    except FileNotFoundError:
        try:
            # Si no est√°n, cargar el archivo original
            data = leer_csv_muestras('exam_data.csv')
            print(f"\n‚úì Datos originales cargados: {data.shape}")
        except FileNotFoundError:
            print("\n‚ùå Error: No se encontr√≥ 'exam_data.csv' en el directorio actual.")
            print("   Aseg√∫rate de que el archivo est√© en el directorio de trabajo.")
            return
    
    # Validar estructura de datos
    if data.shape[0] != 5000 or data.shape[1] != 100:
        print(f"\n‚ö†Ô∏è Advertencia: Se esperaban 5000√ó100 datos, se encontraron {data.shape}")
    
    # Ejecutar an√°lisis
    mu_est, sigma_est, sample_means, sample_stds, s_unbiased = analisis_parte_a(data)
    mean_of_means, std_of_means = analisis_parte_b(sample_means, sample_stds)
    analisis_parte_c(sample_means, sample_stds, data)
    
    print("\n‚úÖ AN√ÅLISIS COMPLETADO EXITOSAMENTE")
    print("="*70)

if __name__ == "__main__":
    main()